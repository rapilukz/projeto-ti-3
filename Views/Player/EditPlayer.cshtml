@model Maio11_Best.Models.player


@{ 
    string formattedBirthdate = Model.birthdate.Value.ToString("yyyy-MM-dd");
}

@using (Html.BeginForm("EditPlayer", "Player", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>player</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.player_id)

        <div class="form-group">
            @Html.LabelFor(model => model.player_name, "Name", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.player_name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.player_name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.position, "Position", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.position, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.position, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.birthdate, "Birthdate", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.birthdate, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                @Html.ValidationMessageFor(model => model.birthdate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.team_id, "Team", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.team_id, ViewBag.TeamNames as SelectList, new { @class = "form-select" })
                @Html.ValidationMessageFor(model => model.team_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Foto", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" id="fich" name="fich" class="form-control" onchange="previewFile(this);" />
                @Html.ValidationMessageFor(model => model.photo_path, "", new { @class = "text-danger" })
            </div>
            @if (!string.IsNullOrEmpty(Model.photo_path))
            {
                <img width="180" class="figure-img m-3" id="foto" src="@Url.Content("~/fotos/players/" + System.IO.Path.GetFileName(Model.photo_path))" alt="Team Photo" />
            }
            else
            {
                <img width="180" class="figure-img m-3" id="foto" alt="Preview" />
            }
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "PlayerList")
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        var birthdateValue = '@Html.Raw(formattedBirthdate)';

        if (birthdateValue) {
            var date = new Date(birthdateValue);
            if (!isNaN(date)) {
                var formattedDate = date.toISOString().split('T')[0]; // Format as yyyy-MM-dd
                document.getElementById('birthdate').value = formattedDate;
            } else {
                console.error('Invalid date format:', birthdateValue);
            }
        }
    });

    function previewFile(input) {
        var file = $("input[type=file]").get(0).files[0];
        if (file) {
            var reader = new FileReader();
            reader.onload = function () {
                $("#foto").attr("src", reader.result);
            }
            reader.readAsDataURL(file);
        }
    }
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
